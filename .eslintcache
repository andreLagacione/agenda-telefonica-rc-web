[{"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\App.tsx":"1","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\index.tsx":"2","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\styles\\app.styles.ts":"3","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\styles\\global.ts":"4","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\sidebar\\sidebar.tsx":"5","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\sidebar\\sidebar.styles.ts":"6","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\pages\\contatos\\contatos.tsx":"7","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\title\\title.styles.ts":"8","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\reportWebVitals.ts":"9","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\title\\title.tsx":"10","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\table\\table.styles.ts":"11","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\utils\\firebase.utils.ts":"12","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\routes.tsx":"13","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\pages\\gerar-listas\\gerar-listas.tsx":"14","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\pages\\contatos\\create.tsx":"15","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\form\\form.styles.ts":"16","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\masks\\phone.ts":"17","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\validators\\phone.ts":"18","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\pages\\gerar-listas\\gerar-listas.styles.ts":"19"},{"size":637,"mtime":1613420939868,"results":"20","hashOfConfig":"21"},{"size":478,"mtime":1610821084636,"results":"22","hashOfConfig":"21"},{"size":573,"mtime":1612827636033,"results":"23","hashOfConfig":"21"},{"size":1760,"mtime":1610832416977,"results":"24","hashOfConfig":"21"},{"size":1501,"mtime":1613420732806,"results":"25","hashOfConfig":"21"},{"size":560,"mtime":1613408069383,"results":"26","hashOfConfig":"21"},{"size":3802,"mtime":1615943080023,"results":"27","hashOfConfig":"21"},{"size":176,"mtime":1610999506109,"results":"28","hashOfConfig":"21"},{"size":425,"mtime":1610819731857,"results":"29","hashOfConfig":"21"},{"size":270,"mtime":1613410480160,"results":"30","hashOfConfig":"21"},{"size":222,"mtime":1613407602274,"results":"31","hashOfConfig":"21"},{"size":1778,"mtime":1615509833238,"results":"32","hashOfConfig":"21"},{"size":683,"mtime":1613420954537,"results":"33","hashOfConfig":"21"},{"size":4437,"mtime":1616029978334,"results":"34","hashOfConfig":"21"},{"size":7119,"mtime":1615943048936,"results":"35","hashOfConfig":"21"},{"size":246,"mtime":1614130185506,"results":"36","hashOfConfig":"21"},{"size":329,"mtime":1614043351306,"results":"37","hashOfConfig":"21"},{"size":229,"mtime":1614044838390,"results":"38","hashOfConfig":"21"},{"size":246,"mtime":1615942046702,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1uacykv",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"45"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\App.tsx",[],["83","84"],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\index.tsx",[],["85","86"],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\styles\\app.styles.ts",[],["87","88"],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\styles\\global.ts",[],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\sidebar\\sidebar.tsx",[],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\sidebar\\sidebar.styles.ts",[],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\pages\\contatos\\contatos.tsx",[],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\title\\title.styles.ts",[],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\reportWebVitals.ts",[],["89","90"],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\title\\title.tsx",[],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\table\\table.styles.ts",[],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\utils\\firebase.utils.ts",[],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\routes.tsx",[],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\pages\\gerar-listas\\gerar-listas.tsx",[],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\pages\\contatos\\create.tsx",["91","92"],"import React, { useEffect, useState } from 'react';\r\nimport Form from '../../base/form/form.styles';\r\nimport { phoneMask } from '../../base/masks/phone';\r\nimport TitleComponent from '../../base/title/title';\r\nimport { phoneValidator } from '../../base/validators/phone';\r\nimport FirebaseService from '../../utils/firebase.utils';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { DocumentData } from '@firebase/firestore-types';\r\nimport { Contact } from '../../base/contact/contact.model';\r\n\r\nconst CreateContact: React.FC = () => {\r\n    const history = useHistory();\r\n    const [name, setName] = useState<string>('');\r\n    const [phone, setPhone] = useState<string>('');\r\n    const [validationMessage, setValidationMessage] = useState<string>('');\r\n    const [backupPhone, setBackupPhone] = useState<string>('');\r\n    const [isPhoneValid, setIsPhoneValid] = useState<boolean>(false);\r\n    const [isPhoneTouched, setIsPhoneTouched] = useState<boolean>(false);\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    let { id }: { id: string } = useParams();\r\n    let title = id ? 'Editar Contato' : 'Criar contato';\r\n\r\n    useEffect(() => {\r\n        getPhoneMask(phone);\r\n    }, [phone]);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            getContatctById();\r\n        }\r\n    }, [id]);\r\n\r\n    const getPhoneMask = (value: string) => {\r\n        if (!value) {\r\n            return;\r\n        }\r\n        \r\n        const masked = phoneMask(value);\r\n        setPhone(masked);\r\n\r\n        if (backupPhone !== phone) {\r\n            validatePhone();\r\n        }\r\n    }\r\n\r\n    const validatePhone = () => {\r\n        const isValid = phoneValidator(phone);\r\n        const message = isValid ? '' : 'Telefone inválido.';\r\n        setIsPhoneValid(isValid);\r\n        setValidationMessage(message);\r\n\r\n        if (isValid) {\r\n            setIsLoading(true);\r\n            checkIfPhoneExists();\r\n        } else {\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    const checkIfPhoneExists = () => {\r\n        if(phone.length) {\r\n            FirebaseService.findByField('contatos', 'phone', '==', phone)\r\n                .then(\r\n                    data => {\r\n                        setIsLoading(false);\r\n\r\n                        if (!data.empty) {\r\n                            setIsPhoneValid(false);\r\n                            setValidationMessage('Este telefone já foi cadastrado.');\r\n                        }\r\n                    }\r\n                );\r\n        }\r\n    }\r\n\r\n    const submitForm = () => {\r\n        const value: Contact = {\r\n            _id: id || '',\r\n            name: name || '-',\r\n            phone,\r\n        };\r\n\r\n        if (id) {\r\n            updateContact(value);\r\n        } else {\r\n            createContact(value);\r\n        }\r\n    }\r\n\r\n    const createContact = (contact: Contact) => {\r\n        const ref = FirebaseService.createDocReference('contatos');\r\n        contact._id = ref.id;\r\n\r\n        ref.set(contact).then(\r\n            _response => {\r\n                toast.success('Contato criado!');\r\n                clearStates();\r\n            },\r\n            _error => toast.error('Erro ao criar contato', _error),\r\n        );\r\n    }\r\n\r\n    const updateContact = (contact: Contact) => {\r\n        FirebaseService.saveData('contatos', id, contact)\r\n            .then(\r\n                _response => {\r\n                    toast.success('Contato atualizado!');\r\n                    clearStates();\r\n\r\n                    setTimeout(() => {\r\n                        history.goBack();\r\n                    }, 1000);\r\n                },\r\n                _error => toast.error('Erro ao atualizar contato', _error),\r\n            );\r\n    }\r\n\r\n    const clearStates = () => {\r\n        setName('');\r\n        setPhone('');\r\n        setValidationMessage('');\r\n        setIsPhoneValid(false);\r\n        setIsPhoneTouched(false);\r\n    }\r\n\r\n    const getContatctById = () => {\r\n        FirebaseService.findByField('contatos', '_id', '==', id)\r\n            .then(\r\n                (data: DocumentData) => {\r\n                    setIsLoading(false);\r\n                    const doc = data.docs[0].data();\r\n                    setBackupPhone(doc.phone);\r\n                    setPhone(doc.phone);\r\n                    setName(doc.name);\r\n                    setValidationMessage('');\r\n                    setIsPhoneValid(true);\r\n                }\r\n            );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <TitleComponent title={title} />\r\n\r\n            <Form className=\"p-3 alert alert-dark mt-4\">\r\n                <form>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-6 relative\">\r\n                            <label className=\"form-label d-block mb-2\">Telefone *</label>\r\n                            <input\r\n                                type=\"tel\"\r\n                                name=\"telefone\"\r\n                                className={ isPhoneTouched && !isPhoneValid ? 'form-control border-danger' : 'form-control' }\r\n                                placeholder=\"(99) 9 9999-9999\"\r\n                                maxLength={16}\r\n                                value={phone}\r\n                                onChange={(e: any) => setPhone(e.target.value)}\r\n                                onFocus={() => setIsPhoneTouched(true)}\r\n                            />\r\n\r\n                            <small className=\"validate-message text-danger mt-1 d-block\">{ validationMessage }</small>\r\n                            <span\r\n                                className=\"icon\"\r\n                                hidden={ !isLoading }\r\n                            >\r\n                                <ClipLoader color=\"#222\" loading={true} size={18} />\r\n                            </span>\r\n                        </div>\r\n\r\n                        <div className=\"col-sm-6\">\r\n                            <label className=\"form-label d-block mb-2\">Nome</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"nome\"\r\n                                className=\"form-control\"\r\n                                value={name}\r\n                                onChange={e => setName(e.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"d-flex justify-content-end mt-3\">\r\n                        <button type=\"button\" className=\"btn btn-secondary\" onClick={() => history.goBack()}>Voltar</button>\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-primary ml-3\"\r\n                            onClick={() => submitForm()}\r\n                            disabled={!isPhoneValid || isLoading}\r\n                        >Salvar</button>\r\n                    </div>\r\n                </form>\r\n            </Form>\r\n\r\n            <ToastContainer />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CreateContact;","D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\form\\form.styles.ts",[],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\masks\\phone.ts",[],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\base\\validators\\phone.ts",[],"D:\\Jobs\\estudando\\agenda-telefonica-rc-web\\src\\pages\\gerar-listas\\gerar-listas.styles.ts",[],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"93","replacedBy":"97"},{"ruleId":"95","replacedBy":"98"},{"ruleId":"93","replacedBy":"99"},{"ruleId":"95","replacedBy":"100"},{"ruleId":"93","replacedBy":"101"},{"ruleId":"95","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":27,"column":8,"nodeType":"105","endLine":27,"endColumn":15,"suggestions":"106"},{"ruleId":"103","severity":1,"message":"107","line":33,"column":8,"nodeType":"105","endLine":33,"endColumn":12,"suggestions":"108"},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],["109"],["110"],["109"],["110"],["109"],["110"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getPhoneMask'. Either include it or remove the dependency array.","ArrayExpression",["111"],"React Hook useEffect has a missing dependency: 'getContatctById'. Either include it or remove the dependency array.",["112"],"no-global-assign","no-unsafe-negation",{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},"Update the dependencies array to be: [getPhoneMask, phone]",{"range":"117","text":"118"},"Update the dependencies array to be: [getContatctById, id]",{"range":"119","text":"120"},[1322,1329],"[getPhoneMask, phone]",[1427,1431],"[getContatctById, id]"]